# -*- coding: utf-8 -*-
"""DataDriven_Juan_Pablo_Osuna_Bonilla

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O85d7VuQGsiBGKsrivbLqwIcS3Z8XfjR
"""

import pandas as pd

# get csv
df = pd.read_csv('/content/synthetic_wtp_laptop_data.csv')

# Define the base model specs
base_model = {
    'Memory': 16, # GB
    'Storage': 512, # GB
    'CPU_class': 1,
    'Screen_size': 14.0, # Inches
    'price': 111000 # Base selling price in yen
}

# Upgrade costs (in yen)
upgrade_costs = {
    'Add 16GB Memory': 7000,
    'Add 512GB Storage': 5000,
    'Upgrade CPU': 15000,
    'Widen Screen': 3000
}

# Define functions to compute gross profit for each upgrade type

# gROSS PROFIT FOR MEMORY UPGRADE (adds 16 GB)
def calc_profit_memory(row):
  if row['Memory']>=base_model['Memory']+16:
    return(row['price']-base_model['price'])-upgrade_costs['Add 16GB Memory']
  return None

# Gross profit for storage upgrade (adds 512 GB)
def calc_profit_storage(row):
  if row['Storage']>=base_model['Storage']+512:
    return(row['price']-base_model['price'])-upgrade_costs['Add 512GB Storage']
  return None

# Gross profit for CPU upgrade (next CPU class)
def calc_profit_cpu(row):
  if row['CPU_class']>=base_model['CPU_class']+1:
    return(row['price']-base_model['price'])-upgrade_costs['Upgrade CPU']
  return None

# Gross profit for screen size upgrade (adds 2 inches)
def calc_profit_screen(row):
  if row['Screen_size']>=base_model['Screen_size']+2:
    return(row['price']-base_model['price'])-upgrade_costs['Widen Screen']
  return None

# Apply all calculations to the dataset
df['profit_memory'] = df.apply(calc_profit_memory, axis=1)
df['profit_storage'] = df.apply(calc_profit_storage, axis=1)
df['profit_cpu'] = df.apply(calc_profit_cpu, axis=1)
df['profit_screen'] = df.apply(calc_profit_screen, axis=1)

# Calculate average gross profit per upgrade type
avg_profits = {
    'Add 16GB Memory': df['profit_memory'].dropna().mean(),
    'Add 512GB Storage': df['profit_storage'].dropna().mean(),
    'Upgrade CPU': df['profit_cpu'].dropna().mean(),
    'Widen Screen': df['profit_screen'].dropna().mean()
}

# Display sorted profits to identify the top two
for k, v in sorted(avg_profits.items(), key=lambda x: x[1], reverse=True)[:2]:
  print(f"{k}: {v:2f} yen")

"""# Final Decision and Justification
Selected Upgrades:
1. Upgrade CPU
2. Add 16 GB Memory


To determine which two upgrades yeid the highest gross profit, I analyzed the dataset synthetic_wtp_laptop_data.csv by calculating the willingness to pay (QTP) increase per upgrade option and subtracting the respective upgrade cost. The average gross profits across all rows were computed for the following uograde options:

- Upgrade cpu: +31,701.87 yen
- Add 16GB Memory: +25,174.48 yen
- Add 512 GB Storage: +12,016.84 yen
- Increase screen size to 16": +11,250.53 yen


As show in the analysis, the CPU uograde provides the highest average profit, followed closely by the memory upgrade. These two upgrades clearly outperform the other two in terms of gross profitability.


Thus, from a data-driven strategy perspective, these uogrades are the most optimal for maximizing returns on a new high-end laptop lineup.
"""